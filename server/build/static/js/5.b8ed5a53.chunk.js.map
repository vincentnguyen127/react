{"version":3,"sources":["pages/maintenance/options.ts","pages/maintenance/colors.ts","pages/maintenance/GanttChart.tsx","pages/maintenance/BandMenus.tsx","pages/maintenance/Spectrum.tsx","pages/maintenance/Content.tsx","pages/maintenance/Alert.tsx","pages/maintenance/index.tsx"],"names":["options","name","label","value","colorSet","columns","id","INIT_Y_AXIS","y_start","y_stop","y_step","GanttChart","scope","useState","source","setSource","traces","setTraces","startDate","setStartDate","yAxis","setYAxis","rows","setRows","size","useWindowSize","useEffect","sheetList","req","XMLHttpRequest","open","responseType","onload","e","data","Uint8Array","response","workbook","XLSX","type","SheetNames","forEach","item","worksheetList","worksheet","sheet_to_json","Sheets","header","el","index","push","_","object","Object","keys","filter","Chart_Type","send","x_start","traceList","preItem","split","join","includes","length","SDate","X_Axis_Start","Y_Axis_Step_Size","Y_Axis_Start","Y_Axis_Stop","dt","item_date","Date","c_date","y_point","SFreq_GHz","Math","abs","EFreq_GHz","isLegend","d","idx","Customer","trace","x","formatDate","EDate","y","mode","line","width","color","showlegend","marker","shape","Grid","container","alignItems","justify","spacing","md","Typography","variant","component","layout","xaxis","title","titlefont","tickfont","range","dtick","showgrid","zerolinecolor","zerolinewidth","yaxis","legend","orientation","xanchor","traceorder","font","family","bordercolor","borderwidth","tracegroupgap","margin","l","b","r","t","pad","config","displayModeBar","TableContainer","style","maxHeight","Table","stickyHeader","aria-label","className","TableHead","TableRow","map","column","TableCell","key","align","toUpperCase","TableBody","row","hover","toFixed","useStyles","makeStyles","theme","root","textAlignLast","default","colors","grey","opacity","BandMenus","menu","onMenu","classes","Select","onChange","clsx","fullWidth","MenuItem","disabled","calWidth","start","end","getKey","getStyle","len","vertical","writingMode","backgroundColor","Hex","minHeight","transform","textAlign","position","grid","content","right","top","block","display","flexDirection","justifyContent","border","cursor","scoped","boxShadow","shadows","zIndex","service","fontSize","typography","pxToRem","remark","announce","marginTop","box","Spectrum","onScope","onContent","dataSource","setDataSource","setLength","page","setPage","totalPage","setTotalPage","result","master","chart_type","pointS","pointF","values","Box","borderColor","blue","data-start","data-end","amount","onClick","Pagination","count","ceil","defaultPage","Content","borderRadius","padding","Transition","forwardRef","props","ref","Slide","direction","marginBottom","Alert","matches","useMediaQuery","Dialog","TransitionComponent","keepMounted","CssBaseline","DialogTitle","DialogContent","DialogContentText","card","Header","MaintenanceView","setMenu","setContent","setScope","Container","maxWidth","Card","CardHeader","CardContent","event","target"],"mappings":"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","file":"static/js/5.b8ed5a53.chunk.js","sourcesContent":["export const options = [\r\n  { name: 'HF', label: 'HF (3 to 30 MHz)', value: '3/30' },\r\n  { name: 'VHF', label: 'VHF (30 to 300 MHz)', value: '30/300' },\r\n  { name: 'UHF', label: 'UHF (300\tto 1,000 MHz)', value: '300/1000' },\r\n  { name: 'L-Band', label: 'L-Band (1,000 to 2,000 MHz)', value: '1000/2000' },\r\n  { name: 'S-Band', label: 'S-Band  (2,000 to 4,000 MHz)', value: '2000/4000' },\r\n  { name: 'C-Band', label: 'C-Band  (4,000 to 7,000 MHz)', value: '4000/7000' },\r\n  {\r\n    name: 'X-Band',\r\n    label: 'X-Band (7,000 to 1,2000 MHz)',\r\n    value: '7000/12000'\r\n  },\r\n  {\r\n    name: 'Ku-Band',\r\n    label: 'Ku-Band (12,000 to 20.000 MHz)',\r\n    value: '12000/20000'\r\n  },\r\n  {\r\n    name: 'Ka-Band',\r\n    label: 'Ka-Band (20,000 to 40,000 MHz)',\r\n    value: '20000/40000'\r\n  },\r\n  {\r\n    name: 'V-Band',\r\n    label: 'V-Band (40,000 to 75,000 MHz)',\r\n    value: '40000/75000'\r\n  },\r\n  {\r\n    name: 'W-Band',\r\n    label: 'W-Band  (75,000 to 110,000 MHz)',\r\n    value: '75000/110000'\r\n  }\r\n];\r\n","export const colorSet = [\r\n  '#808000',\r\n  '#FFFF00',\r\n  '#00FF00',\r\n  '#00FFFF',\r\n  '#FF00FF',\r\n  '#0000FF',\r\n  '#FF0000',\r\n  '#000080',\r\n  '#008080',\r\n  '#008000',\r\n  '#800080',\r\n  '#800000',\r\n  '#808080',\r\n  '#FEC433',\r\n  '#C0C0C0'\r\n];\r\n","import React, { useState, useEffect, FC } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Plot from 'react-plotly.js';\r\nimport * as XLSX from 'xlsx';\r\nimport _ from 'underscore';\r\nimport {\r\n  Grid,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport { colorSet } from './colors';\r\nimport useWindowSize from 'src/hooks/useWindowSize';\r\nimport { formatDate } from 'src/utils/formatDate';\r\n\r\ninterface GanttChartProps {\r\n  className?: string;\r\n  scope: string;\r\n}\r\n\r\nconst columns = [\r\n  { id: 'no', name: 'no' },\r\n  { id: 'Customer', name: 'name' },\r\n  { id: 'Chart_Type', name: 'band' },\r\n  { id: 'Link_Type', name: 'link type' },\r\n  { id: 'SFreq_GHz', name: 'min freq (ghz)' },\r\n  { id: 'EFreq_GHz', name: 'max freq (ghz)' },\r\n  { id: 'SDate', name: 'start date' },\r\n  { id: 'EDate', name: 'end date' }\r\n];\r\n\r\nconst INIT_Y_AXIS = {\r\n  y_start: 0,\r\n  y_stop: 0,\r\n  y_step: 0\r\n};\r\n\r\nconst GanttChart: FC<GanttChartProps> = ({ scope }) => {\r\n  const [source, setSource] = useState([]);\r\n  const [traces, setTraces] = useState([]);\r\n  const [startDate, setStartDate] = useState(0);\r\n  const [yAxis, setYAxis] = useState(INIT_Y_AXIS);\r\n  const [rows, setRows] = useState([]);\r\n  const size = useWindowSize();\r\n\r\n  useEffect(() => {\r\n    let sheetList: Object = {};\r\n    let req = new XMLHttpRequest();\r\n    req.open('GET', 'static/excel/data.xlsx', true);\r\n    req.responseType = 'arraybuffer';\r\n\r\n    req.onload = function(e) {\r\n      const data = new Uint8Array(req.response);\r\n      const workbook = XLSX.read(data, { type: 'array' });\r\n\r\n      workbook.SheetNames.forEach(item => {\r\n        let worksheetList = [];\r\n        let worksheet: any = XLSX.utils.sheet_to_json(workbook.Sheets[item], {\r\n          header: 1\r\n        });\r\n        sheetList[item] = [];\r\n\r\n        worksheet.forEach((el: any, index: number) => {\r\n          if (index > 0) worksheetList.push(_.object(worksheet[0], el));\r\n        });\r\n        sheetList[item] = worksheetList;\r\n      });\r\n\r\n      sheetList[Object.keys(sheetList)[0]].forEach(item => {\r\n        item['data'] = sheetList[Object.keys(sheetList)[1]].filter(\r\n          el => item.Chart_Type === el.Chart_Type\r\n        );\r\n      });\r\n\r\n      setSource(sheetList[Object.keys(sheetList)[0]]);\r\n    };\r\n\r\n    req.send();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let x_start = 0,\r\n      y_start = 0,\r\n      y_step = 0,\r\n      y_stop = 0;\r\n    let traceList = [];\r\n\r\n    source.forEach(item => {\r\n      let preItem = item;\r\n      if (item.Chart_Type === scope.split('_').join(' ')) {\r\n        if (Object.keys(item).includes('data') && item.data.length > 0) {\r\n          x_start = item.data[0].SDate;\r\n        } else {\r\n          x_start = item.X_Axis_Start;\r\n        }\r\n\r\n        y_step = item.Y_Axis_Step_Size;\r\n        y_start = item.Y_Axis_Start;\r\n        y_stop = item.Y_Axis_Stop;\r\n\r\n        if (Object.keys(preItem).includes('data') && preItem.data.length > 0) {\r\n          item.data.forEach(function(dt, index) {\r\n            let item_date = new Date(dt.SDate);\r\n            let c_date = new Date(x_start);\r\n            let y_point =\r\n              dt.SFreq_GHz + Math.abs(dt.SFreq_GHz - dt.EFreq_GHz) / 2;\r\n            let isLegend = true;\r\n\r\n            if (item_date < c_date) {\r\n              x_start = dt.SDate;\r\n            }\r\n\r\n            item.data.forEach((d, idx) => {\r\n              if (idx < index && d.Customer === dt.Customer) {\r\n                index = idx;\r\n                isLegend = false;\r\n              }\r\n            });\r\n\r\n            let trace = {\r\n              name: dt.Customer,\r\n              x: [formatDate(dt.SDate, 0), formatDate(dt.EDate, 0)],\r\n              y: [y_point, y_point],\r\n              mode: 'lines',\r\n              line: {\r\n                width:\r\n                  (Math.abs(dt.SFreq_GHz - dt.EFreq_GHz) / (y_step * 10)) * 340,\r\n                color: colorSet[index % colorSet.length]\r\n              },\r\n              showlegend: isLegend\r\n            };\r\n\r\n            traceList.push(trace);\r\n          });\r\n        } else {\r\n          let trace = {\r\n            name: '',\r\n            x: [x_start, x_start + 10],\r\n            y: [y_start, y_start],\r\n            mode: 'lines',\r\n            line: {\r\n              width: (Math.abs(y_start - y_stop) / (y_step * 10)) * 340,\r\n              color: 'transparent'\r\n            },\r\n            showlegend: false,\r\n            marker: {\r\n              size: 12,\r\n              shape: [\r\n                'line-ew',\r\n                'diamond-open',\r\n                'line-ew',\r\n                'line-ew',\r\n                'diamond-open',\r\n                'line-ew'\r\n              ]\r\n            }\r\n          };\r\n          traceList.push(trace);\r\n        }\r\n        setRows(item.data);\r\n      }\r\n    });\r\n\r\n    setTraces(traceList);\r\n    setStartDate(x_start);\r\n    setYAxis({ y_start: y_start, y_stop: y_stop, y_step: y_step });\r\n  }, [scope, source]);\r\n\r\n  return (\r\n    <>\r\n      <Grid container alignItems=\"center\" justify=\"center\" spacing={3}>\r\n        <Grid item md={12}>\r\n          <Typography variant=\"h6\" component=\"strong\">\r\n            Known LEO's supported by system\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container alignItems=\"center\" justify=\"center\" spacing={3}>\r\n        <Grid item md={12}>\r\n          <Plot\r\n            data={traces}\r\n            layout={{\r\n              width: size.width * 0.75,\r\n              xaxis: {\r\n                title: '',\r\n                titlefont: {\r\n                  size: 10,\r\n                  color: '#212529'\r\n                },\r\n                tickfont: {\r\n                  size: 12\r\n                },\r\n                range: [formatDate(startDate, -1), formatDate(startDate, 7)],\r\n                dtick: 'M12',\r\n                showgrid: true,\r\n                zerolinecolor: '#969696',\r\n                zerolinewidth: 1\r\n              },\r\n              yaxis: {\r\n                title: 'Frequency (GHZ)',\r\n                titlefont: {\r\n                  size: 12,\r\n                  color: '#212529'\r\n                },\r\n                tickfont: {\r\n                  size: 12\r\n                },\r\n                range: [yAxis.y_start, yAxis.y_stop],\r\n                dtick: yAxis.y_step,\r\n                showgrid: true,\r\n                zerolinecolor: '#969696',\r\n                zerolinewidth: 1\r\n              },\r\n              legend: {\r\n                orientation: 'h',\r\n                xanchor: 'right',\r\n                x: 1,\r\n                traceorder: 'normal',\r\n                font: {\r\n                  family: 'sans-serif',\r\n                  size: 12,\r\n                  color: '#000'\r\n                },\r\n                bordercolor: '#212529',\r\n                borderwidth: 1,\r\n                tracegroupgap: 100\r\n              },\r\n              margin: {\r\n                l: 60,\r\n                b: 80,\r\n                r: 30,\r\n                t: 30,\r\n                pad: 5\r\n              },\r\n              showlegend: true\r\n            }}\r\n            config={{ displayModeBar: false }}\r\n          />\r\n        </Grid>\r\n        <Grid item md={12}>\r\n          <TableContainer style={{ maxHeight: 440 }}>\r\n            <Table\r\n              stickyHeader\r\n              aria-label=\"sticky table\"\r\n              className=\"customized-gantt-chart-table\"\r\n            >\r\n              <TableHead>\r\n                <TableRow>\r\n                  {columns.map(column => (\r\n                    <TableCell key={column.id} align=\"center\">\r\n                      {column.name.toUpperCase()}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {rows.map((row, index) => (\r\n                  <TableRow\r\n                    hover\r\n                    key={`${row.Chart_Type.split(' ').join('_')}_${index}`}\r\n                  >\r\n                    {columns.map((column, idx) => (\r\n                      <TableCell key={column.id} align=\"center\">\r\n                        {idx !== 0\r\n                          ? column.id === 'SFreq_GHz' ||\r\n                            column.id === 'EFreq_GHz'\r\n                            ? row[column.id].toFixed(7)\r\n                            : column.id === 'SDate' || column.id === 'EDate'\r\n                            ? formatDate(row[column.id], 0)\r\n                            : row[column.id]\r\n                          : index + 1}\r\n                      </TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nGanttChart.propTypes = {\r\n  className: PropTypes.string,\r\n  scope: PropTypes.string.isRequired\r\n};\r\n\r\nexport default GanttChart;\r\n","import React, { FC } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Select,\r\n  MenuItem,\r\n  makeStyles,\r\n  Theme,\r\n  colors\r\n} from '@material-ui/core';\r\nimport { options } from './options';\r\nimport clsx from 'clsx';\r\n\r\ninterface BandMenusProps {\r\n  className?: string;\r\n  menu: string;\r\n  onMenu: (param: any) => void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    textAlignLast: 'center'\r\n  },\r\n  default: {\r\n    color: colors.grey[500],\r\n    opacity: 0.9\r\n  }\r\n}));\r\n\r\nconst BandMenus: FC<BandMenusProps> = ({ className, menu, onMenu }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Select\r\n      name=\"\"\r\n      value={menu}\r\n      onChange={onMenu}\r\n      className={clsx(classes.root, className)}\r\n      fullWidth\r\n    >\r\n      <MenuItem value=\"none\" className={classes.default} disabled>\r\n        Select Frequency Band\r\n      </MenuItem>\r\n      {options.map(item => (\r\n        <MenuItem value={item.name} key={item.name}>\r\n          {item.label}\r\n        </MenuItem>\r\n      ))}\r\n    </Select>\r\n  );\r\n};\r\n\r\nBandMenus.propTypes = {\r\n  className: PropTypes.string,\r\n  menu: PropTypes.string.isRequired,\r\n  onMenu: PropTypes.func\r\n};\r\n\r\nexport default BandMenus;\r\n","import React, { useState, useEffect, FC, ChangeEvent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport * as XLSX from 'xlsx';\r\nimport _ from 'underscore';\r\nimport {\r\n  Grid,\r\n  Box,\r\n  Typography,\r\n  makeStyles,\r\n  Theme,\r\n  colors\r\n} from '@material-ui/core';\r\nimport { Pagination } from '@material-ui/lab';\r\nimport { Band } from 'src/types/band';\r\n\r\ninterface SpectrumProps {\r\n  className?: string;\r\n  scope: string;\r\n  menu: string;\r\n  onScope: (param: string) => void;\r\n  onContent: (param: string) => void;\r\n}\r\n\r\nconst calWidth = (start: number, end: number, length: number) => {\r\n  const value = (Math.abs(start - end) / length) * 95;\r\n  return { width: value + '%' };\r\n};\r\n\r\nconst getKey = (value: string): string => {\r\n  return value.split(' ').join('_');\r\n};\r\n\r\nconst getStyle = (dt: Band, length: number) => {\r\n  const len = 40 / length + 'vh';\r\n  let value = {};\r\n\r\n  if (dt.vertical) {\r\n    value = {\r\n      writingMode: 'vertical-rl',\r\n      //@ts-ignore\r\n      backgroundColor: dt.Hex,\r\n      minHeight: len,\r\n      maxHeight: len,\r\n      transform: 'rotate(-180deg)'\r\n    };\r\n  } else {\r\n    value = {\r\n      //@ts-ignore\r\n      backgroundColor: dt.Hex,\r\n      minHeight: len,\r\n      maxHeight: len,\r\n      textAlign: 'center'\r\n    };\r\n  }\r\n\r\n  return value;\r\n};\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    position: 'relative'\r\n  },\r\n  grid: {\r\n    minHeight: theme.spacing(2),\r\n    '&:before': {\r\n      content: 'attr(data-start)'\r\n    },\r\n    '&:after': {\r\n      content: 'attr(data-end)',\r\n      position: 'absolute',\r\n      right: theme.spacing(3),\r\n      top: 0\r\n    }\r\n  },\r\n  block: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    border: '1px solid #000',\r\n    cursor: 'pointer'\r\n  },\r\n  scoped: {\r\n    boxShadow: theme.shadows[10],\r\n    zIndex: 1000\r\n  },\r\n  service: {\r\n    fontSize: theme.typography.pxToRem(12)\r\n  },\r\n  remark: {\r\n    fontSize: theme.typography.pxToRem(10)\r\n  },\r\n  announce: {\r\n    marginTop: theme.spacing(1)\r\n  },\r\n  box: {\r\n    width: '100%',\r\n    minHeight: theme.spacing(30),\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    display: 'flex'\r\n  }\r\n}));\r\n\r\nconst Spectrum: FC<SpectrumProps> = ({\r\n  className,\r\n  menu,\r\n  scope,\r\n  onScope,\r\n  onContent\r\n}) => {\r\n  const [source, setSource] = useState([]);\r\n  const [dataSource, setDataSource] = useState([]);\r\n  const [length, setLength] = useState(0);\r\n  const [page, setPage] = useState(1);\r\n  const [totalPage, setTotalPage] = useState(1);\r\n  const classes = useStyles();\r\n  const amount = 8;\r\n\r\n  useEffect(() => {\r\n    let req = new XMLHttpRequest();\r\n    req.open('GET', '/static/excel/dataset.xlsx', true);\r\n    req.responseType = 'arraybuffer';\r\n\r\n    req.onload = (e: ProgressEvent<EventTarget>) => {\r\n      const data = new Uint8Array(req.response);\r\n      const workbook = XLSX.read(data, { type: 'array' });\r\n      const worksheet: any = XLSX.utils.sheet_to_json(\r\n        workbook.Sheets[workbook.SheetNames[0]],\r\n        {\r\n          header: 1\r\n        }\r\n      );\r\n      let sheetList = [];\r\n      let result = [];\r\n\r\n      if (Object.keys(worksheet).length > 2) {\r\n        worksheet.forEach((el: any, idx: number) => {\r\n          if (idx > 0) sheetList.push(_.object(worksheet[0], el));\r\n        });\r\n        \r\n        sheetList.forEach((item: Band) => {\r\n          const data = sheetList.filter(el => item.master === el.master);\r\n          const count = _.filter(result, el => item.master === el.master);\r\n\r\n          if (count.length < 1 && item.master) {\r\n            result.push({\r\n              master: item.master,\r\n              start: item.start,\r\n              end: item.end,\r\n              data: data,\r\n              vertical: item.vertical\r\n            });\r\n          }\r\n        });\r\n        setSource(result);\r\n        setTotalPage(Object.keys(result).length / amount);\r\n        onScope(result[0].data[0].chart_type);\r\n        onContent(result[0].data[0].content);\r\n      } else {\r\n        setSource([]);\r\n        setTotalPage(0);\r\n        setPage(1);\r\n        onScope('');\r\n        onContent('');\r\n      }\r\n    };\r\n\r\n    req.send();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [menu]);\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(source).length > 0) {\r\n      const pointS = source[(page - 1) * amount];\r\n      const pointF =\r\n        page < totalPage\r\n          ? source[page * amount - 1]\r\n          : source[totalPage * amount - 1];\r\n\r\n      if (pointF && Object.keys(pointF).includes('end')) {\r\n        const len = Math.abs(pointS.start - pointF.end);\r\n        let data = Object.values(source).filter(\r\n          (item: Band) =>\r\n            item.master > (page - 1) * amount && item.master <= page * amount\r\n        );\r\n        setLength(len);\r\n        setDataSource(data);\r\n      }\r\n    } else {\r\n      setLength(0);\r\n      setDataSource([]);\r\n    }\r\n  }, [page, source, totalPage]);\r\n\r\n  const handleClick = (type: string, content: string): void => {\r\n    onScope(type);\r\n    onContent(content);\r\n  };\r\n\r\n  const handleChangePage = (e: ChangeEvent, page: number): void => {\r\n    setPage(page);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        alignItems=\"center\"\r\n        justify=\"center\"\r\n        style={{ position: 'relative' }}\r\n        className={clsx(className, classes.root)}\r\n      >\r\n        {Object.keys(dataSource).length === 0 && (\r\n          <Box\r\n            border={1}\r\n            borderColor={colors.blue[200]}\r\n            className={classes.box}\r\n            textAlign=\"center\"\r\n          >\r\n            <Typography variant=\"body2\" color=\"textSecondary\">\r\n              No Band Data Entered Yet.\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n        {Object.keys(dataSource).length > 0 &&\r\n          Object.values(dataSource).map((el, idx: number) => (\r\n            <Grid\r\n              item\r\n              key={el.master}\r\n              className={classes.grid}\r\n              style={calWidth(el.start, el.end, length)}\r\n              data-start={el.start}\r\n              data-end={idx === amount - 1 ? el.end : ''}\r\n            >\r\n              <Grid container alignItems=\"center\" justify=\"center\">\r\n                {el.data.map((dt: Band, index: number) => (\r\n                  <Grid\r\n                    item\r\n                    md={12}\r\n                    id={getKey(dt.chart_type)}\r\n                    key={`${getKey(dt.service)}-${idx}-${index}`}\r\n                    onClick={() => handleClick(dt.chart_type, dt.content)}\r\n                    style={getStyle(dt, el.data.length)}\r\n                    className={clsx(\r\n                      classes.block,\r\n                      dt.chart_type === scope && classes.scoped\r\n                    )}\r\n                  >\r\n                    <Typography className={classes.service}>\r\n                      {dt.service}\r\n                    </Typography>\r\n                    {dt.remark !== '' && (\r\n                      <Typography className={classes.remark}>\r\n                        {dt.remark}\r\n                      </Typography>\r\n                    )}\r\n                  </Grid>\r\n                ))}\r\n              </Grid>\r\n            </Grid>\r\n          ))}\r\n      </Grid>\r\n      <Grid\r\n        container\r\n        alignItems=\"center\"\r\n        spacing={3}\r\n        className={classes.announce}\r\n      >\r\n        <Grid item md={9}>\r\n          <Typography variant=\"body1\">\r\n            This chart will only work with 1024 x 768. We recommend full screen\r\n            mode.\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item md={3}>\r\n          <Grid container justify=\"flex-end\">\r\n            <Grid item md={12}>\r\n              <Pagination\r\n                count={Math.ceil(totalPage)}\r\n                page={page}\r\n                defaultPage={1}\r\n                variant=\"outlined\"\r\n                shape=\"rounded\"\r\n                onChange={handleChangePage}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nSpectrum.propTypes = {\r\n  className: PropTypes.string,\r\n  scope: PropTypes.string.isRequired,\r\n  menu: PropTypes.string.isRequired,\r\n  onScope: PropTypes.func,\r\n  onContent: PropTypes.func\r\n};\r\n\r\nexport default Spectrum;\r\n","import React, { FC } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { Grid, Typography, Box, makeStyles, Theme } from '@material-ui/core';\r\ninterface ContentProps {\r\n  className?: string;\r\n  content: string;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {}\r\n}));\r\n\r\nconst Content: FC<ContentProps> = ({ className, content }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n      className={clsx(className, classes.root)}\r\n    >\r\n      <Grid item md={4}>\r\n        <Typography variant=\"h6\" component=\"strong\">\r\n          Regulatory Notes\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item md={8} />\r\n      <Grid item md={12}>\r\n        <Box borderColor=\"primary.main\" border={2} borderRadius={5} padding={2}>\r\n          <Typography variant=\"body2\">{content}</Typography>\r\n        </Box>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nContent.propTypes = {\r\n  className: PropTypes.string,\r\n  content: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Content;\r\n","import React, { forwardRef, ReactElement, Ref, FC } from 'react';\r\nimport {\r\n  CssBaseline,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n  Slide,\r\n  useMediaQuery,\r\n  makeStyles,\r\n  Theme\r\n} from '@material-ui/core';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\n\r\nconst Transition = forwardRef(function Transition(\r\n  props: TransitionProps & { children?: ReactElement<any, any> },\r\n  ref: Ref<Function>\r\n) {\r\n  return <Slide direction=\"left\" ref={ref} {...props} />;\r\n});\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {},\r\n  content: {\r\n    marginBottom: theme.spacing(6)\r\n  }\r\n}));\r\n\r\nconst Alert: FC = () => {\r\n  const matches = useMediaQuery('(max-width: 1000px)');\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Dialog open={matches} TransitionComponent={Transition} keepMounted>\r\n      <CssBaseline />\r\n      <DialogTitle>Screen Resolution Alert</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText className={classes.content}>\r\n          Your screen resolution is under 1024 x 768. We can't confirm your\r\n          resolution of this Spectrum Chart. Please Check your screen mode\r\n          again.\r\n        </DialogContentText>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","import React, { useState, FC, ChangeEvent } from 'react';\r\nimport {\r\n  Grid,\r\n  Container,\r\n  CssBaseline,\r\n  Card,\r\n  CardHeader,\r\n  Typography,\r\n  CardContent,\r\n  makeStyles,\r\n  Theme,\r\n  colors\r\n} from '@material-ui/core';\r\nimport { options } from './options';\r\nimport GanttChart from './GanttChart';\r\nimport BandMenus from './BandMenus';\r\nimport Spectrum from './Spectrum';\r\nimport Content from './Content';\r\nimport Alert from './Alert';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    margin: theme.spacing(5)\r\n  },\r\n  card: {\r\n    padding: theme.spacing(2)\r\n  },\r\n  content: {\r\n    backgroundColor: colors.grey[50]\r\n  }\r\n}));\r\n\r\nconst Header: FC = () => {\r\n  return (\r\n    <Typography component=\"h1\" variant=\"h5\" color=\"textSecondary\">\r\n      Spectrum Dashboard <small>(maintenance version)</small>\r\n    </Typography>\r\n  );\r\n};\r\n\r\nconst MaintenanceView: FC = () => {\r\n  const [menu, setMenu] = useState(options[3].name);\r\n  const [content, setContent] = useState('');\r\n  const [scope, setScope] = useState('');\r\n  const classes = useStyles();\r\n\r\n  const handleScope = (value: string): void => setScope(value);\r\n\r\n  const handleMenu = (event: ChangeEvent): void => {\r\n    //@ts-ignore\r\n    setMenu(event.target.value);\r\n  };\r\n\r\n  const handleContent = (value: string): void => {\r\n    setContent(value);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Container component=\"main\" maxWidth=\"lg\">\r\n        <CssBaseline />\r\n        <Card className={classes.card}>\r\n          <CardHeader title={<Header />} />\r\n          <CardContent>\r\n            <Grid container alignItems=\"center\" spacing={3}>\r\n              <Grid item md={3}>\r\n                <BandMenus menu={menu} onMenu={handleMenu} />\r\n              </Grid>\r\n              <Grid item md={12}>\r\n                <Spectrum\r\n                  scope={scope}\r\n                  menu={menu}\r\n                  onScope={handleScope}\r\n                  onContent={handleContent}\r\n                />\r\n              </Grid>\r\n              <Grid item md={12} className={classes.content}>\r\n                {content && content !== '' && <Content content={content} />}\r\n              </Grid>\r\n              <Grid item md={12}>\r\n                <GanttChart scope={scope} />\r\n              </Grid>\r\n            </Grid>\r\n          </CardContent>\r\n        </Card>\r\n      </Container>\r\n      <Alert />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MaintenanceView;\r\n"],"sourceRoot":""}