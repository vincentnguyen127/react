{"version":3,"sources":["pages/dashboard/colors.ts","pages/dashboard/SystemGantt/GanttChart.tsx","pages/dashboard/SystemGantt/index.tsx","pages/dashboard/LinkMenus.tsx","pages/dashboard/BandMenus.tsx","pages/dashboard/Alert.tsx","pages/dashboard/index.tsx"],"names":["colorSet","GanttChart","traces","annots","startDate","axis","size","useWindowSize","data","layout","width","annotations","plot_bgcolor","paper_bgcolor","font","color","xaxis","title","titlefont","tickfont","range","formatDate","dtick","showgrid","zerolinecolor","zerolinewidth","gridcolor","yaxis","start","stop","step","legend","orientation","xanchor","traceorder","family","bordercolor","borderwidth","tracegroupgap","margin","l","b","r","t","pad","showlegend","config","displayModeBar","INIT_AXIS","SystemGantt","status","useState","source","setSource","setTraces","setStartDate","setAxis","setAnnots","useEffect","band","sheetList","req","XMLHttpRequest","open","SYSTEMS_FILE2","responseType","onload","e","Uint8Array","response","workbook","xlsx","type","SheetNames","forEach","item","worksheetList","worksheet","sheet_to_json","Sheets","header","el","index","push","_","object","Object","keys","send","xStart","yStart","yStep","yStop","traceList","annotList","Chart_Type","link","filter","Link_Type","X_Axis_Start","Y_Axis_Step_Size","Y_Axis_Start","Y_Axis_Stop","length","SDate","dt","item_date","Date","c_date","y_point","SFreq_GHz","Math","abs","EFreq_GHz","d","idx","System","trace","name","Id","x","EDate","y","mode","line","annot","getMiddleDate","text","showarrow","marker","shape","every","key","Boolean","Grid","container","alignItems","justify","spacing","md","useStyles","makeStyles","theme","root","textAlignLast","default","colors","grey","opacity","LinkMenus","className","onChange","links","setLinks","classes","result","sdata","includes","Select","value","event","target","clsx","defaultValue","fullWidth","MenuItem","disabled","map","BandMenus","bands","setBands","shift","Transition","forwardRef","props","ref","Slide","direction","content","marginBottom","Alert","matches","useMediaQuery","Dialog","TransitionComponent","keepMounted","CssBaseline","DialogTitle","DialogContent","DialogContentText","initialStatus","card","paddingTop","paddingLeft","paddingRight","backgroundColor","boxShadow","shadows","blue","cardContent","padding","footer","HomeView","setStatus","handleChange","prevState","Container","component","maxWidth","Card","CardHeader","Typography","variant","CardContent","Box","py","CardActions","Link","href"],"mappings":"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","file":"static/js/3.98047360.chunk.js","sourcesContent":["export const colorSet = [\r\n  '#808000',\r\n  '#FFFF00',\r\n  '#99FF00',\r\n  '#99FFFF',\r\n  '#FF00FF',\r\n  '#8800FF',\r\n  '#FF0000',\r\n  '#000080',\r\n  '#AA8080',\r\n  '#AA8000',\r\n  '#800080',\r\n  '#800000',\r\n  '#81d487',\r\n  '#FEC433',\r\n  '#f03e3e'\r\n];\r\n","import React, { FC } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Plot from 'react-plotly.js';\r\nimport useWindowSize from 'src/hooks/useWindowSize';\r\nimport { formatDate } from 'src/utils/formatDate';\r\n\r\ninterface Axis {\r\n  start: number;\r\n  stop: number;\r\n  step: number;\r\n}\r\n\r\ninterface GanttChartsProps {\r\n  className?: string;\r\n  traces: any[];\r\n  startDate: number;\r\n  annots: any[];\r\n  axis: Axis;\r\n}\r\n\r\nconst GanttChart: FC<GanttChartsProps> = ({\r\n  traces,\r\n  annots,\r\n  startDate,\r\n  axis\r\n}) => {\r\n  const size = useWindowSize();\r\n\r\n  return (\r\n    <Plot\r\n      data={traces}\r\n      layout={{\r\n        width: size.width * 0.85,\r\n        annotations: annots,\r\n        plot_bgcolor: '#444',\r\n        paper_bgcolor: '#444',\r\n        font: {\r\n          color: 'white'\r\n        },\r\n        xaxis: {\r\n          title: '',\r\n          titlefont: {\r\n            size: 10,\r\n            color: '#fff'\r\n          },\r\n          tickfont: {\r\n            size: 12\r\n          },\r\n          range: [formatDate(startDate, -1), formatDate(startDate, 7)],\r\n          dtick: 'M12',\r\n          showgrid: true,\r\n          zerolinecolor: '#fff',\r\n          zerolinewidth: 1,\r\n          gridcolor: '#fff'\r\n        },\r\n        yaxis: {\r\n          title: 'Frequency (GHZ)',\r\n          titlefont: {\r\n            size: 12,\r\n            color: '#fff'\r\n          },\r\n          tickfont: {\r\n            size: 12\r\n          },\r\n          range: [axis.start, axis.stop],\r\n          dtick: axis.step,\r\n          showgrid: true,\r\n          zerolinecolor: '#fff',\r\n          zerolinewidth: 1,\r\n          gridcolor: '#fff'\r\n        },\r\n        legend: {\r\n          orientation: 'h',\r\n          xanchor: 'left',\r\n          traceorder: 'normal',\r\n          font: {\r\n            family: 'sans-serif',\r\n            size: 12,\r\n            color: '#fff'\r\n          },\r\n          bordercolor: '#fff',\r\n          borderwidth: 1,\r\n          tracegroupgap: 100\r\n        },\r\n        margin: {\r\n          l: 60,\r\n          b: 80,\r\n          r: 30,\r\n          t: 30,\r\n          pad: 5\r\n        },\r\n        showlegend: true\r\n      }}\r\n      config={{ displayModeBar: false }}\r\n    />\r\n  );\r\n};\r\n\r\nGanttChart.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default GanttChart;\r\n","import React, { useState, useEffect, FC } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as xlsx from 'xlsx';\r\nimport _ from 'underscore';\r\nimport { Grid } from '@material-ui/core';\r\nimport { colorSet } from '../colors';\r\nimport { formatDate, getMiddleDate } from 'src/utils/formatDate';\r\nimport { SYSTEMS_FILE2 } from 'src/constants';\r\nimport { Chart } from 'src/types/system';\r\nimport GanttChart from './GanttChart';\r\n\r\ninterface SystemGanttProps {\r\n  className?: string;\r\n  status: Status;\r\n}\r\n\r\ninterface Axis {\r\n  start: number;\r\n  stop: number;\r\n  step: number;\r\n}\r\n\r\ninterface Status {\r\n  link: string;\r\n  band: string;\r\n}\r\n\r\nconst INIT_AXIS: Axis = {\r\n  start: 0,\r\n  stop: 0,\r\n  step: 0\r\n};\r\n\r\nconst SystemGantt: FC<SystemGanttProps> = ({ status }) => {\r\n  const [source, setSource] = useState([]);\r\n  const [traces, setTraces] = useState([]);\r\n  const [startDate, setStartDate] = useState(0);\r\n  const [axis, setAxis] = useState(INIT_AXIS);\r\n  const [annots, setAnnots] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (status.band === 'none') return;\r\n\r\n    let sheetList: Object = {};\r\n    let req = new XMLHttpRequest();\r\n    req.open('GET', SYSTEMS_FILE2, true);\r\n    req.responseType = 'arraybuffer';\r\n\r\n    req.onload = function(e) {\r\n      const data = new Uint8Array(req.response);\r\n      const workbook = xlsx.read(data, { type: 'array' });\r\n\r\n      workbook.SheetNames.forEach(item => {\r\n        let worksheetList = [];\r\n        let worksheet: any = xlsx.utils.sheet_to_json(workbook.Sheets[item], {\r\n          header: 1\r\n        });\r\n        sheetList[item] = [];\r\n\r\n        worksheet.forEach((el: any, index: number) => {\r\n          if (index > 0) worksheetList.push(_.object(worksheet[0], el));\r\n        });\r\n        sheetList[item] = worksheetList;\r\n      });\r\n      sheetList[Object.keys(sheetList)[0]].forEach(item => {\r\n        item['data'] = sheetList[status.band];\r\n      });\r\n      setSource(sheetList[Object.keys(sheetList)[0]]);\r\n    };\r\n\r\n    req.send();\r\n  }, [status.band]);\r\n\r\n  useEffect(() => {\r\n    let xStart = 0,\r\n      yStart = 0,\r\n      yStep = 0,\r\n      yStop = 0;\r\n    let traceList = [],\r\n      annotList = [],\r\n      data = [];\r\n\r\n    source.forEach((item: Chart) => {\r\n      if (item.Chart_Type !== status.band) return;\r\n\r\n      data =\r\n        status.link === 'all'\r\n          ? item.data\r\n          : item.data.filter(el => el.Link_Type === status.link);\r\n      xStart = item.X_Axis_Start;\r\n      yStep = item.Y_Axis_Step_Size;\r\n      yStart = item.Y_Axis_Start;\r\n      yStop = item.Y_Axis_Stop;\r\n\r\n      if (data.length > 0) {\r\n        xStart = data[0].SDate;\r\n\r\n        data.forEach((dt, index) => {\r\n          const item_date = new Date(dt.SDate);\r\n          const c_date = new Date(xStart);\r\n          const y_point =\r\n            dt.SFreq_GHz + Math.abs(dt.SFreq_GHz - dt.EFreq_GHz) / 2;\r\n\r\n          if (item_date < c_date) xStart = dt.SDate;\r\n          data.forEach((d, idx) => {\r\n            if (idx < index && d.System === dt.System) {\r\n              index = idx;\r\n            }\r\n          });\r\n\r\n          const trace = {\r\n            name: dt.Id + '. ' + dt.System,\r\n            x: [formatDate(dt.SDate, 0), formatDate(dt.EDate, 0)],\r\n            y: [y_point, y_point],\r\n            showlegend: true,\r\n            mode: 'lines',\r\n            line: {\r\n              width:\r\n                (Math.abs(dt.SFreq_GHz - dt.EFreq_GHz) / (yStep * 10)) * 340,\r\n              color: colorSet[index % colorSet.length]\r\n            }\r\n          };\r\n          const annot = {\r\n            x: getMiddleDate(dt.SDate, dt.EDate),\r\n            y: y_point,\r\n            text: dt.Id,\r\n            showarrow: false,\r\n            font: { color: '#fff', size: 14 }\r\n          };\r\n          annotList.push(annot);\r\n          traceList.push(trace);\r\n        });\r\n      } else {\r\n        const trace = {\r\n          name: '',\r\n          x: [xStart, xStart + 10],\r\n          y: [yStart, yStart],\r\n          mode: 'lines',\r\n          line: {\r\n            width: (Math.abs(yStart - yStop) / (yStep * 10)) * 340,\r\n            color: 'transparent'\r\n          },\r\n          showlegend: false,\r\n          marker: {\r\n            size: 12,\r\n            shape: [\r\n              'line-ew',\r\n              'diamond-open',\r\n              'line-ew',\r\n              'line-ew',\r\n              'diamond-open',\r\n              'line-ew'\r\n            ]\r\n          }\r\n        };\r\n        traceList.push(trace);\r\n      }\r\n    });\r\n\r\n    const isValid =\r\n      data.length > 1 ||\r\n      data.every(item => Object.keys(item).every(key => Boolean(item[key])));\r\n\r\n    if (isValid) {\r\n      setTraces(traceList);\r\n      setAnnots(annotList);\r\n    } else {\r\n      setTraces([]);\r\n      setAnnots([]);\r\n    }\r\n\r\n    setStartDate(xStart);\r\n    setAxis({ start: yStart, stop: yStop, step: yStep });\r\n    // eslint-disable-next-line\r\n  }, [status.link, source]);\r\n\r\n  return (\r\n    <Grid container alignItems=\"center\" justify=\"center\" spacing={3}>\r\n      <Grid item md={12}>\r\n        <GanttChart\r\n          traces={traces}\r\n          startDate={startDate}\r\n          axis={axis}\r\n          annots={annots}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nSystemGantt.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default SystemGantt;\r\n","import React, { useState, useEffect, FC } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport * as xlsx from 'xlsx';\r\nimport { Select, MenuItem, makeStyles, Theme, colors } from '@material-ui/core';\r\nimport { SYSTEMS_FILE2 } from 'src/constants';\r\n\r\ninterface Status {\r\n  band: string;\r\n  link: string;\r\n}\r\n\r\ninterface SystemMenusProps {\r\n  className?: string;\r\n  status: Status;\r\n  onChange: (name: string, value: string) => void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    textAlignLast: 'center',\r\n    color: '#fff'\r\n  },\r\n  default: {\r\n    color: colors.grey[500],\r\n    opacity: 0.9\r\n  }\r\n}));\r\n\r\nconst LinkMenus: FC<SystemMenusProps> = ({ className, status, onChange }) => {\r\n  const [links, setLinks] = useState<string[]>([]);\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    let result: string[] = [];\r\n    let req = new XMLHttpRequest();\r\n    req.open('GET', SYSTEMS_FILE2, true);\r\n    req.responseType = 'arraybuffer';\r\n\r\n    req.onload = function(e) {\r\n      const data = new Uint8Array(req.response);\r\n      const workbook = xlsx.read(data, { type: 'array' });\r\n      const sdata = workbook.Sheets[status.band];\r\n      const worksheet: any = xlsx.utils.sheet_to_json(sdata, { header: 1 });\r\n\r\n      worksheet.forEach((el: Array<any>, index: number) => {\r\n        // @ts-ignore\r\n        index > 0 && !result.includes(el[2]) && result.push(el[2]);\r\n      });\r\n      setLinks(result);\r\n    };\r\n\r\n    req.send();\r\n  }, [status.band]);\r\n\r\n  useEffect(() => {\r\n    links.length > 0 && onChange('link', links[0]);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [links]);\r\n\r\n  const handleChange = (event): void => {\r\n    const { name, value } = event.target;\r\n    onChange(name, value);\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      name=\"link\"\r\n      value={status.link}\r\n      onChange={handleChange}\r\n      className={clsx(classes.root, className)}\r\n      defaultValue=\"none\"\r\n      fullWidth\r\n    >\r\n      <MenuItem value=\"none\" className={classes.default} disabled>\r\n        Select Link Type\r\n      </MenuItem>\r\n      <MenuItem value=\"all\">All</MenuItem>\r\n      {links.map((item: string) => (\r\n        <MenuItem value={item} key={item}>\r\n          {item}\r\n        </MenuItem>\r\n      ))}\r\n    </Select>\r\n  );\r\n};\r\n\r\nLinkMenus.propTypes = {\r\n  className: PropTypes.string,\r\n  // @ts-ignore\r\n  status: PropTypes.object.isRequired,\r\n  onChange: PropTypes.func\r\n};\r\n\r\nexport default LinkMenus;\r\n","import React, { useState, useEffect, FC } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport * as xlsx from 'xlsx';\r\nimport { Select, MenuItem, makeStyles, Theme, colors } from '@material-ui/core';\r\nimport { SYSTEMS_FILE2 } from 'src/constants';\r\n\r\ninterface Status {\r\n  link: string;\r\n  band: string;\r\n}\r\ninterface BandMenusProps {\r\n  className?: string;\r\n  status: Status;\r\n  onChange: (name: string, value: string) => void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    textAlignLast: 'center',\r\n    color: '#fff'\r\n  },\r\n  default: {\r\n    color: colors.grey[500],\r\n    opacity: 0.9\r\n  }\r\n}));\r\n\r\nconst BandMenus: FC<BandMenusProps> = ({ className, status, onChange }) => {\r\n  const [bands, setBands] = useState<string[]>([]);\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    let req = new XMLHttpRequest();\r\n    req.open('GET', SYSTEMS_FILE2, true);\r\n    req.responseType = 'arraybuffer';\r\n\r\n    req.onload = (e: ProgressEvent<EventTarget>) => {\r\n      const data = new Uint8Array(req.response);\r\n      const workbook = xlsx.read(data, { type: 'array' });\r\n      workbook.SheetNames.shift()\r\n      setBands(workbook.SheetNames);\r\n    };\r\n\r\n    req.send();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    bands.length > 0 && onChange('band', bands[0]);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [bands]);\r\n\r\n  const handleChange = (event): void => {\r\n    const { name, value } = event.target;\r\n    onChange(name, value);\r\n  };\r\n\r\n  return (\r\n    <Select\r\n      name=\"band\"\r\n      value={status.band}\r\n      onChange={handleChange}\r\n      className={clsx(classes.root, className)}\r\n      defaultValue=\"none\"\r\n      fullWidth\r\n    >\r\n      <MenuItem value=\"none\" className={classes.default} disabled>\r\n        Select Frequency Band\r\n      </MenuItem>\r\n      {bands.map(item => (\r\n        <MenuItem value={item} key={item}>\r\n          {item}\r\n        </MenuItem>\r\n      ))}\r\n    </Select>\r\n  );\r\n};\r\n\r\nBandMenus.propTypes = {\r\n  className: PropTypes.string,\r\n  onChange: PropTypes.func\r\n};\r\n\r\nexport default BandMenus;\r\n","import React, { forwardRef, ReactElement, Ref, FC } from 'react';\r\nimport {\r\n  CssBaseline,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n  Slide,\r\n  useMediaQuery,\r\n  makeStyles,\r\n  Theme\r\n} from '@material-ui/core';\r\nimport { TransitionProps } from '@material-ui/core/transitions';\r\n\r\nconst Transition = forwardRef(function Transition(\r\n  props: TransitionProps & { children?: ReactElement<any, any> },\r\n  ref: Ref<Function>\r\n) {\r\n  return <Slide direction=\"left\" ref={ref} {...props} />;\r\n});\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {},\r\n  content: {\r\n    marginBottom: theme.spacing(6)\r\n  }\r\n}));\r\n\r\nconst Alert: FC = () => {\r\n  const matches = useMediaQuery('(max-width: 1000px)');\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Dialog open={matches} TransitionComponent={Transition} keepMounted>\r\n      <CssBaseline />\r\n      <DialogTitle>Screen Resolution Alert</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText className={classes.content}>\r\n          Your screen resolution is under 1024 x 768. We can't confirm your\r\n          resolution of this Spectrum Chart. Please Check your screen mode\r\n          again.\r\n        </DialogContentText>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","import React, { FC, useState } from 'react';\r\nimport {\r\n  Box,\r\n  Grid,\r\n  Container,\r\n  CssBaseline,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  CardActions,\r\n  Link,\r\n  Typography,\r\n  makeStyles,\r\n  Theme,\r\n  colors\r\n} from '@material-ui/core';\r\nimport ImportantDevicesIcon from '@material-ui/icons/ImportantDevices';\r\nimport SystemGantt from './SystemGantt';\r\nimport LinkMenus from './LinkMenus';\r\nimport BandMenus from './BandMenus';\r\nimport Alert from './Alert';\r\n\r\ninterface Status {\r\n  band: string;\r\n  link: string;\r\n}\r\n\r\nconst initialStatus = {\r\n  band: 'none',\r\n  link: 'none'\r\n};\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    margin: theme.spacing(5)\r\n  },\r\n  card: {\r\n    paddingTop: 0,\r\n    paddingLeft: 0,\r\n    paddingRight: 0,\r\n    backgroundColor: colors.grey[100],\r\n    boxShadow: theme.shadows[10]\r\n  },\r\n  header: {\r\n    color: colors.grey[50],\r\n    backgroundColor: colors.blue[700]\r\n  },\r\n  cardContent: {\r\n    paddingTop: theme.spacing(3),\r\n    padding: theme.spacing(6),\r\n    backgroundColor: '#444'\r\n  },\r\n  content: {\r\n    backgroundColor: colors.grey[50]\r\n  },\r\n  footer: {\r\n    padding: theme.spacing(3),\r\n    backgroundColor: colors.grey[300]\r\n  }\r\n}));\r\n\r\nconst HomeView: FC = () => {\r\n  const classes = useStyles();\r\n  const [status, setStatus] = useState<Status>(initialStatus);\r\n\r\n  const handleChange = (name: string, value: string): void => {\r\n    setStatus(prevState => ({ ...prevState, [name]: value }));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Container component=\"main\" maxWidth=\"xl\">\r\n        <CssBaseline />\r\n        <Card className={classes.card}>\r\n          <CardHeader\r\n            className={classes.header}\r\n            title={\r\n              <Typography component=\"header\" variant=\"h5\">\r\n                Spectrum Viewer\r\n              </Typography>\r\n            }\r\n          />\r\n          <CardContent className={classes.cardContent}>\r\n            <Box py={3}>\r\n              <Grid container alignItems=\"center\" spacing={3}>\r\n                <Grid item md={3}>\r\n                  <BandMenus status={status} onChange={handleChange} />\r\n                </Grid>\r\n                <Grid item md={3}>\r\n                  <LinkMenus status={status} onChange={handleChange} />\r\n                </Grid>\r\n                <Grid item md={12}>\r\n                  <SystemGantt status={status} />\r\n                </Grid>\r\n              </Grid>\r\n              <Alert />\r\n            </Box>\r\n          </CardContent>\r\n          <CardActions className={classes.footer}>\r\n            <ImportantDevicesIcon color=\"primary\" />\r\n            <Typography component=\"footer\" variant=\"body2\">\r\n              For more information of spectrum licensing requirements for using\r\n              a commercial system, go to{' '}\r\n              <Link href=\"http://spectrum.gov\" target=\"_blank\">\r\n                http://spectrum.gov\r\n              </Link>\r\n            </Typography>\r\n          </CardActions>\r\n        </Card>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomeView;\r\n"],"sourceRoot":""}